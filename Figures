# Set working directory
setwd("C:/Users/alasa/Desktop/Raliegh Soil Mircobiome Project Working Directory")

# Load libraries
library(qiime2R)
library(readr)
library(readxl)
library(phyloseq)
library(parallel)
library(vegan)
library(hillR)
library(ggplot2)
library(MetBrewer)
library(dplyr)
library(virdis)
library(microbiome)
library(eulerr)

# LOAD IN DATA ---------------------------------------------
# Reformat taxonomy file
tax16S <- read_qza("taxonomy.qza")
tax16S<-tax16S$data %>% as.tibble() %>%
  mutate(Taxon=gsub("d__", "", Taxon)) %>% 
  mutate(Taxon=gsub("p__", "", Taxon)) %>% 
  mutate(Taxon=gsub("c__", "", Taxon)) %>% 
  mutate(Taxon=gsub("o__", "", Taxon)) %>% 
  mutate(Taxon=gsub("f__", "", Taxon)) %>% 
  mutate(Taxon=gsub("g__", "", Taxon)) %>% 
  mutate(Taxon=gsub("s__", "", Taxon)) %>% 
  separate(Taxon, sep=";", c("Kingdom","Phylum","Class","Order","Family","Genus","Species"))%>%
  mutate(Phylum=replace_na(Phylum,"empty"))
write.csv(tax16S, file = "16S-taxonomy.csv", row.names =F)

# Create phyloseq object with: OTU table; taxonomy; and metadata

# Load in OTU table
otu_table <- otutable <- read_delim("otutable.txt", delim = "\t", 
                                    escape_double = FALSE, col_types = cols(Sample1 = col_number(), 
                                                                            Sample2 = col_number(), Sample3 = col_number(), 
                                                                            Sample4 = col_number(), Sample5 = col_number(), 
                                                                            Sample6 = col_number(), Sample7 = col_number(), 
                                                                            Sample8 = col_number(), Sample9 = col_number(), 
                                                                            Sample10 = col_number(), Sample11 = col_number(), 
                                                                            Sample12 = col_number(), Sample13 = col_number(), 
                                                                            Sample14 = col_number(), Sample15 = col_number(), 
                                                                            Sample16 = col_number(), Sample17 = col_number(), 
                                                                            Sample18 = col_number(), Sample19 = col_number(), 
                                                                            Sample20 = col_number(), Sample21 = col_number(), 
                                                                            Sample22 = col_number(), Sample23 = col_number(), 
                                                                            Sample24 = col_number(), Sample25 = col_number(), 
                                                                            Sample26 = col_number(), Sample27 = col_number(), 
                                                                            Sample28 = col_number(), Sample29 = col_number(), 
                                                                            Sample30 = col_number()), trim_ws = TRUE)
colnames(otu_table)[1] <- "Feature.ID"
otu_table %>% 
  remove_rownames %>% 
  column_to_rownames(var="Feature.ID") -> otu_table

# Load in taxonomy
tax_table <- read_csv("C:/Users/alasa/Desktop/Raliegh Soil Mircobiome Project Working Directory/ncstate_microbiome/ncstate_microbiome/16S-taxonomy.csv")
tax_table %>% 
  remove_rownames %>% 
  column_to_rownames(var="Feature.ID") -> tax_table
tax_table <- as.matrix(tax_table)

# Load in metadata
metadat <- read_excel("C:/Users/alasa/Desktop/Raliegh Soil Mircobiome Project Working Directory/ncstate_microbiome/ncstate_microbiome/sample_metadata.xlsx")
metadat %>% 
  remove_rownames %>% 
  column_to_rownames(var="Sample_ID") -> metadat

# Create a phyloseq object 
otu <- otu_table(otu_table, taxa_are_rows = TRUE)
tax <- tax_table(tax_table)
samp <- sample_data(metadat)

# Merge otu table, taxonomy, and metadata into one object
phylo <- merge_phyloseq(otu, tax, samp)

#save phyloseq object so I do not have to do steps above every time
saveRDS(phylo, "rdusoil_phylobj.rds")
# FILTER DATA ------------------
# Remove contaminants
phylo_filtered <- subset_taxa(phylo, Kingdom== "Bacteria" & 
                        Family != "Mitochondria" &
                        Class != "Chloroplast")

n.filtered <- ntaxa(phylo) - ntaxa(phylo_filtered)

# 28,221 OTUs; filtered down to 15,567 OTUs - removed plant contaminants/unknowns

## Look at sequence coverage of all samples 
sorted <- sort(sample_sums(phylo_filtered))  
min <- min(sample_sums(phylo_filtered)) #137,397
max <- max(sample_sums(phylo_filtered)) # 245,534
mean <- mean(sample_sums(phylo_filtered)) # 185,140.6
median <- median(sample_sums(phylo_filtered)) # 189,065

# RAREFACTION CURVE ------------------------------------
# Rarefaction curve function
calculate_rarefaction_curves <- function(psdata, measures, depths, parallel=T) {
  require('plyr') # ldply
  require('reshape2') # melt
  require('doParallel')
  
  # set parallel options if required
  if (parallel) {
    paropts  <- list(.packages=c("phyloseq", "reshape2"))
  } else {
    paropts  <- NULL
  }
  
  estimate_rarified_richness <- function(psdata, measures, depth) {
    if(max(sample_sums(psdata)) < depth) return()
    psdata <- prune_samples(sample_sums(psdata) >= depth, psdata)
    
    rarified_psdata <- rarefy_even_depth(psdata, depth, verbose = FALSE)
    
    alpha_diversity <- estimate_richness(rarified_psdata, measures = measures)
    
    # as.matrix forces the use of melt.array, which includes the Sample names (rownames)
    molten_alpha_diversity <- melt(as.matrix(alpha_diversity), varnames = c('Sample', 'Measure'), value.name = 'Alpha_diversity')
    
    molten_alpha_diversity
  }
  
  names(depths) <- depths # this enables automatic addition of the Depth to the output by ldply
  rarefaction_curve_data <- ldply(depths, estimate_rarified_richness, psdata = psdata, measures = measures, .id = 'Depth', .progress = ifelse(interactive() && ! parallel, 'text', 'none'), .parallel=parallel, .paropts=paropts)
  
  # convert Depth from factor to numeric
  rarefaction_curve_data$Depth <- as.numeric(levels(rarefaction_curve_data$Depth))[rarefaction_curve_data$Depth]
  
  rarefaction_curve_data
}

# Multi-thread rarefaction -------------
detectCores(all.tests=TRUE)
cl <- makeCluster(detectCores(all.tests=TRUE),setup_strategy = "sequential")
registerDoParallel(cl)

rarefaction_curve_data <- calculate_rarefaction_curves(phylo_filtered, c('Observed', 'Shannon'), 
                                                       rep(c(1, 10, 100, 1000, 1:100 * 10000), each = 10))

rarefaction_curve_data_summary <- ddply(rarefaction_curve_data, c('Depth', 'Sample', 'Measure'), summarise, 
                                        Alpha_diversity_mean = mean(Alpha_diversity), Alpha_diversity_sd = sd(Alpha_diversity))

rarefaction_curve_data_summary_verbose <-  merge(rarefaction_curve_data_summary %>% mutate(Sample = gsub("[.]", "-", Sample)),
                                                 data.frame(sample_data(phylo_filtered)) %>% 
                                                   rownames_to_column(var = "rowname"),
                                                 by.x = 'Sample', by.y = 'rowname')

plot_data <- rarefaction_curve_data_summary_verbose %>%
  filter(Measure == "Observed")

plot_data %>%
  ggplot(aes(x = Depth, y = Alpha_diversity_mean, ymin = Alpha_diversity_mean - Alpha_diversity_sd, 
             ymax = Alpha_diversity_mean + Alpha_diversity_sd, group = Sample)) +
  geom_line(alpha=1) +
  geom_pointrange() + 
  scale_x_continuous(trans = "log10", name = "Sequence Depth") +
  ylab("Observed Species Richness") +
  theme_bw()

# Alternative rarefaction curve through vegan
bact.tab=t(as(otu_table(phylo_filtered), "matrix"))
bact.map=sample_data(phylo_filtered)
row.names(bact.tab)=bact.map$X.SampleID 
(raremax <- min(rowSums(bact.tab))) # 1154

rarecurve(bact.tab, step = 100, sample = raremax, col = "blue", cex = 0.6) -> p1


# RAREFY TO AN EVEN DEPTH -------------
set.seed(45) # set this so your data is reproducable
bact.rfy <- rarefy_even_depth(phylo_filtered, sample.size = 137397, replace = FALSE, rngseed = TRUE)
#82 OTUs were removed because they are no longer present in any sample after random subsampling 

saveRDS(bact.rfy, "bact.rfy.rds")

n.taxa.b4 <- ntaxa(phylo_filtered) # 12654 OTU before rarefaction
ntaxa.rfy <- ntaxa(bact.rfy) # 12572 OTUs after rarefaction

# OPEN FILES ----------------------

# ALPHA DIVERSITY ----------------

# Shannon diversity ----
otu_table <- t(as(bact.rfy@otu_table, "matrix"))
otu_table <- as.data.frame(otu_table)

shan <- hill_taxa(otu_table, q = 1)
shan <- merge(bact.rfy@sam_data, shan, by = 0)


shan %>%
  ggplot(aes(x = `Median.Income.1`, y = y)) +
  geom_point() +
  ylab("Shannon Diversity") +
  theme_classic() +
  geom_smooth(method = 'lm') -> p2

p3 <- shan %>%
  filter(mean_pH > 4.12) %>%
  ggplot(aes(x = `mean_pH`, y = y)) +
  geom_point() +
  ylab("Shannon Diversity") +
  xlab("pH") +
  geom_smooth(method = 'lm') +
  theme_classic() 
  

model <- lm(y ~ `Median.Income`, data = shan)
summary(model)

# Species Richness ----
otu_table <- t(as(bact.rfy@otu_table, "matrix"))
otu_table <- as.data.frame(otu_table)

rich <- hill_taxa(otu_table, q = 0)
rich <- merge(bact.rfy@sam_data, rich, by = 0)

rich %>%
  ggplot(aes(x = `Median.Income.1`, y = y)) +
  geom_point() + 
  ylab("Species Richness") +
  theme_classic() +
  geom_smooth(method = 'lm') -> pp1

rich %>%
  filter(mean_pH > 4.12) %>%
  ggplot(aes(x = `mean_pH`, y = y)) +
  geom_point() + 
  ylab("Species Richness") +
  xlab("pH") +
  theme_classic() +
  geom_smooth(method = 'lm') -> pp

#bact and plant generic richness
rich %>%
  ggplot(aes(x = `Generic.Richness`, y = y)) +
  geom_point() + 
  ylab("Bacterial OTU Richness") +
  xlab("Plant Generic Richness")+
  theme_classic() +
  geom_smooth(method = 'lm', formula = y ~ splines::bs(x, 3), se = TRUE)

rich %>%
  ggplot(aes(x = `Generic.Richness`, y = y)) +
  geom_point() + 
  ylab("Bacterial OTU Richness") +
  xlab("Plant Generic Richness")+
  theme_classic() +
  geom_smooth(method = 'lm')

pp62 <- rich %>%
  ggplot(aes(x = `Median.Income.1`, y = y)) +
  geom_point() + 
  ylab("OTU Richness") +
  xlab("Median Income") +
  theme_classic() +
  geom_smooth(color = "purple2" ,method = 'lm', formula = y ~ splines::bs(x, 3), se = TRUE)
  
pp62regression <- lm(formula = y ~ splines::bs(Median.Income.1, 3), data = rich)
summary(pp62regression)
plot(pp62regression)

pp65 <- rich %>%
  ggplot(aes(x = `Median.Income.1`, y = y)) +
  geom_point() + 
  ylab("OTU Richness") +
  xlab("Median Income") +
  theme_classic() +
  geom_smooth(color = "purple2" ,method = 'lm', formula = y ~ x)

pp65regression <- lm(formula = y ~ Median.Income.1, data = rich)
summary(pp65regression)
plot(pp65regression)



model <- lm(y ~ `Median Income`, data = rich)
summary(model)


View(sum2)

# BETA DIVERSITY ------------
bact.rfy.rel <- transform_sample_counts(bact.rfy, function(x) x / sum(x) )

# Distances for Ordination 
# look for stress values around 0.2
# Goal is to use the min.#axes for which stress is lo
set.seed(2)
bray.NMDS <- ordinate(bact.rfy.rel, method = "NMDS", distance = "bray" )


plot_ordination(bact.rfy.rel, ordination = bray.NMDS, color = "Income_Cat", title = "Total Composition") + 
  geom_point(size = 5)+ 
  theme_bw() +
  theme(plot.title = element_text(size = 16)) + 
  theme(axis.title.x = element_text(size = 25)) + 
  theme(axis.title.y = element_text(size = 25)) + 
  theme(axis.text.x = element_text(size = 20, color = "black"))  + 
  theme(axis.text.y = element_text(size = 20, color = "black"))  + 
  theme(panel.border = element_rect(colour = "black", fill=NA, size=2))+
  theme(legend.text = element_text(size = 15)) + 
  theme(legend.position="right", legend.title=element_text(size=15))+
  theme(legend.position="right")+ 
  guides(color=guide_legend(title="Income Category")) +
  theme(plot.margin=unit(c(.5,1,.5,.5),"cm"))  -> p4

# BETA DIVERSITY PERMANOVA
bact.bray <- phyloseq::distance(bact.rfy.rel,"bray")
set.seed(2)
permanova <- adonis(bact.bray~sample_data(bact.rfy.rel)$Income_Cat, permutations = 9999, method = "bray")
permanova["aov.tab"]
#PERMANOVA with pH 
permanova <- adonis2(bact.bray~sample_data(bact.rfy.rel)$mean_pH, permutations = 9999, method = "bray")
permanova["aov.tab"]




# BARPLOT ----------------


class_sum <- tapply(taxa_sums(bact.rfy), 
                    tax_table(bact.rfy)[, "Class"], sum, na.rm=TRUE)
top10class <- names(sort(class_sum, TRUE))[1:10]##
abundant_class <- subset_taxa(bact.rfy, Class %in% top10class)
abundant_class_glom <- tax_glom(abundant_class, taxrank = "Class")

abundant_class_glom <- transform_sample_counts(abundant_class_glom, function(x) x/sum(x))

abundant_class_melt <- psmelt(abundant_class_glom)


sum2 <- abundant_class_melt %>% 
  group_by(Sample, Class) %>%
  summarise(means = mean(Abundance))

rare <- sum2 %>%
  group_by(Sample) %>%
  summarise(means = 1- sum(means)) %>%
  mutate(Class = "Other/Unidentified Class")

#concatenate the datasets
sum2 = rbind(sum2, rare)
#order groups
sum2$Class <- forcats::fct_relevel(sum2$Class, "Other/Unidentified Class", after = Inf) 
sum2$Sample <- as.factor(sum2$Sample) 
sum2$Sample <- factor(sum2$Sample,  levels = c ("Sample1", "Sample2", "Sample3", "Sample4", "Sample5",
                                                "Sample6", "Sample7", "Sample8", "Sample9", "Sample10",
                                                "Sample11", "Sample12", "Sample13", "Sample14", "Sample15",
                                                "Sample16", "Sample17", "Sample18", "Sample19", "Sample20",
                                                "Sample21", "Sample22", "Sample23", "Sample24", "Sample25",
                                                "Sample26", "Sample27", "Sample28", "Sample29", "Sample30")) 
sum2 %>%   
  ggplot(aes(x = Sample, y = means, fill = Class)) +  
  geom_bar(position = "stack", stat = "identity", col = "black") +   
  theme(legend.position = "right", legend.title = element_blank(), 
  axis.line = element_blank()) +
  scale_fill_manual(values=met.brewer("Lakota", 11)) +   
  scale_y_continuous(name = NULL, breaks = NULL) +   
  ggtitle("Dominant Class") +   
  theme(strip.text = element_text(size = 12, face = "italic"), 
  axis.text.x = element_text(size = 10),  
  axis.title = element_blank(),        
  title = element_text(size = 11)) +  
  theme_minimal() +   
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 

#barplot to order
order_sum <- tapply(taxa_sums(bact.rfy), 
                    tax_table(bact.rfy)[, "Order"], sum, na.rm=TRUE)
top10order <- names(sort(order_sum, TRUE))[1:10]##
abundant_order <- subset_taxa(bact.rfy, Order %in% top10order)
abundant_order_glom <- tax_glom(abundant_order, taxrank = "Order")

abundant_order_glom <- transform_sample_counts(abundant_order_glom, function(x) x/sum(x))

abundant_order_melt <- psmelt(abundant_order_glom)


ordersum2 <- abundant_order_melt %>% 
  group_by(Sample, Order) %>%
  summarise(means = mean(Abundance))

orderrare <- ordersum2 %>%
  group_by(Sample) %>%
  summarise(means = 1- sum(means)) %>%
  mutate(Class = "Other/Unidentified Class")

#concatenate the datasets
ordersum2 = rbind(ordersum2, orderrare)
#order groups
ordersum2$Class <- forcats::fct_relevel(ordersum2$Class, "Other/Unidentified Class", after = Inf) 
ordersum2$Sample <- as.factor(ordersum2$Sample) 
ordersum2$Sample <- factor(ordersum2$Sample,  levels = c ("Sample1", "Sample2", "Sample3", "Sample4", "Sample5",
                                                "Sample6", "Sample7", "Sample8", "Sample9", "Sample10",
                                                "Sample11", "Sample12", "Sample13", "Sample14", "Sample15",
                                                "Sample16", "Sample17", "Sample18", "Sample19", "Sample20",
                                                "Sample21", "Sample22", "Sample23", "Sample24", "Sample25",
                                                "Sample26", "Sample27", "Sample28", "Sample29", "Sample30")) 
ordersum2 %>%   
  ggplot(aes(x = Sample, y = means, fill = Order)) +  
  geom_bar(position = "stack", stat = "identity", col = "black") +   
  theme(legend.position = "right", legend.title = element_blank(), 
        axis.line = element_blank()) +
  scale_fill_manual(values=met.brewer("Lakota", 11)) +   
  scale_y_continuous(name = NULL, breaks = NULL) +   
  ggtitle("Dominant Order") +   
  theme(strip.text = element_text(size = 12, face = "italic"), 
        axis.text.x = element_text(size = 10),  
        axis.title = element_blank(),        
        title = element_text(size = 11)) +  
  theme_minimal() +   
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 


#core microbiome stuff---------

inputforcore <- microbiome::transform(bact.rfy, "compositional")
relative_otu_prevlance<- prevalence(inputforcore, detection = 1/100,sort = TRUE)
absolute_otu_prevlance<- prevalence(inputforcore, detection = 1/100,sort = TRUE, count = TRUE)
x <-as.data.frame(absolute_otu_prevlance)

core <- core(inputforcore, detection = 0, prevalence = 0.5) 
core_abundance <- sample_sums(core(inputforcore, detection = 0.1, prevalence = .95))    

ntaxa(core) #/ntaxa(inputforcore)

saveRDS(bact.rfy, "bact.rfy.rds")



ggplot(ph, aes(x=site, y = sample.1_pH, group = sample_ID )) +
  geom_point() +
  scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30))

#adding to the metadata file. ----------------
bact.rfy <- readRDS("bact.rfy.rds")
ph <- read.csv("Alassane's soil samples - pH data.csv")
ph <- ph[,c(2,12)]
rownames(ph) <- sample_names(bact.rfy)
ph <-  sample_data(ph)
bact.rfy <- merge_phyloseq(bact.rfy, ph)

plant <- read.csv("generic richness.csv")
rownames(plant) <- sample_names(bact.rfy)
plant <- sample_data(plant)
bact.rfy <- merge_phyloseq(bact.rfy, plant)



#pH and income 
bact.rfy@sam_data %>%
  ggplot(aes(x = `Median.Income`, y = `mean_pH`)) +
  geom_point() +
  ylab("pH") +
  xlab("Median Income") +
  theme_classic() +
  geom_smooth(method = 'lm')

metadata <- meta(bact.rfy)
model <- lm(mean_pH ~ `Median.Income`, data = metadata)
summary(model)

#income and plant diver
bact.rfy@sam_data %>%
  ggplot(aes(x = `Median.Income.1`, y = `Generic.Richness`)) +
  geom_point() +
  ylab("Plant Generic Richness") +
  xlab("Median Income") +
  theme_classic() 

bact.rfy@sam_data %>%
  ggplot(aes(x = `site`, y = bact.rfy@sam_data[["Generic.Richness"]]))+
  geom_bar(fill = "gray1", stat = 'identity') +
  xlab("Site")+
  scale_x_continuous(breaks = seq(1,30,1))+
  ylab("Plant Generic Richness")+
  theme_classic()



metadata <- meta(bact.rfy)
model <- lm(mean_pH ~ `Median.Income`, data = metadata)
summary(model)

#multiple stacked barplot for bact richnes and plant richness
richdf <- as.data.frame(rich)
richdf <- richdf[,c(5,6,7)]
richdf <- rename (richdf, "Generic Richness" = Generic.Richness)
richdf <- rename(richdf, "Income" = Median.Income.1)
bric <- rename(bric, "Generic Richness" = y)

pric <- richdf[,c(1,2)]
bric <- richdf[,c(3,2)]

b<-  ggplot(bric, aes(x=Income, y= `Generic Richness`)) +
  geom_bar(stat="identity")  

p<-  ggplot(pric, aes(x=Income, y= `Generic Richness`)) +
  geom_bar(stat="identity") 

q <- gridExtra::grid.arrange(p,b, ncol=1)

#OTU abundance
worm <- as.data.frame(bact.rfy@sam_data[["Generic.Richness"]])
wormtake <- as.data.frame(taxa_sums(bact.rfy@otu_table))

summary(rich$y)

